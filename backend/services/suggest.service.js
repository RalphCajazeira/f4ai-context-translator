import { all, run } from '../db.js';import { normalize } from './normalize.service.js';import { scoreFuzzy } from './scoring.service.js';function esc(s){return s.replace(/[.*+?^${}()|[\]\\]/g,'\\$&')}export async function topKExamples(srcText,k=5){const srcNorm=normalize(srcText);const rows=await all('SELECT source_norm, target_text, uses, quality FROM tm_entries');const scored=rows.map(r=>({...r,score:scoreFuzzy(srcNorm,r.source_norm)}));return scored.sort((a,b)=>b.score-a.score).slice(0,k).map(r=>({src:r.source_norm,tgt:r.target_text}))}export async function recordApproval(sourceText,targetText){const srcNorm=normalize(sourceText);const res=await run('UPDATE tm_entries SET uses = uses + 1, quality = MIN(1, quality + 0.02), last_used_at = CURRENT_TIMESTAMP WHERE source_norm = ? AND target_text = ?',[srcNorm,targetText]);if(res.changes===0){await run('INSERT INTO tm_entries (source_norm, target_text, uses, quality) VALUES (?, ?, ?, ?)',[srcNorm,targetText,1,0.92])}}export async function getGlossary(){return await all('SELECT term_source, term_target FROM glossary WHERE approved = 1')}export async function getSuggestions(text,src='en',tgt='pt',topN=8){const srcNorm=normalize(text);const tmExact=await all('SELECT target_text, uses, quality FROM tm_entries WHERE source_norm = ? ORDER BY quality DESC, uses DESC LIMIT 3',[srcNorm]);const exactHits=tmExact.map(r=>({text:r.target_text,score:0.95*r.quality,origin:'TM'}));const tmAll=await all('SELECT source_norm, target_text, uses, quality FROM tm_entries');const fuzzy=[];for(const t of tmAll){const s=scoreFuzzy(srcNorm,t.source_norm);if(s>=0.55)fuzzy.push({text:t.target_text,score:s*0.9,origin:'Fuzzy'})}const glossRows=await getGlossary();const glossHits=[];for(const g of glossRows){const re=new RegExp(`\\b${esc(g.term_source)}\\b`,'i');if(re.test(text))glossHits.push({text:g.term_target,score:0.78,origin:'Glossary'})}const merged=[...exactHits,...glossHits,...fuzzy].sort((a,b)=>b.score-a.score);const seen=new Set(),uniq=[];for(const s of merged){const k=(s.text||'').trim().toLowerCase();if(!k)continue;if(!seen.has(k)){seen.add(k);uniq.push(s)}if(uniq.length>=topN)break}return uniq}